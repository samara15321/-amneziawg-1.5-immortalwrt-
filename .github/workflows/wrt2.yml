name: Create Release_OFF
on:
  push:
    tags:
      - "gowrt*.*.*"

jobs:
  build:
    name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
          - tag: "23.05.6"
            pkgarch: aarch64_generic
            target: rockchip
            subtarget: armv8
            vermagic: "1165e14f95a921713988260b06d8b0ab"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Setup Go 1.24.4
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.4

      - name: Cache Tools and Kernel
        id: cache-tools-kernel
        uses: actions/cache@v4
        env:
          cache-name: "cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch}}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget}}"
        with:
          path: "**"
          key: ${{ runner.os }}-build-vm4-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-vm4-cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch}}-

      - name: Building kernel and tools
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"

          # Setup & install feeds
          wget https://raw.githubusercontent.com/immortalwrt/immortalwrt/v${{ matrix.build_env.tag }}/feeds.conf.default -O feeds.conf
          echo "src-git awgopenwrt https://github.com/samara15321/-amneziawg-1.5-immortalwrt-.git" >> ./feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a

          # Setup config with AWG and dependencies
          wget https://downloads.immortalwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config
          echo 'CONFIG_GOLANG_EXTERNAL_BOOTSTRAP_ROOT="/opt/hostedtoolcache/go/1.24.4/x64/bin/go"' >> .config
          echo 'CONFIG_GOLANG_BUILD_CACHE_DIR=""' >> .config
          make defconfig

          echo "    > make tools/install"
          make tools/install -i -j `nproc`
          echo "    > make toolchain/install"
          make toolchain/install -i -j `nproc`
          echo "    > make target/linux/compile"
          make target/linux/compile -i -j `nproc` V=s

      - name: Build AmneziaWG packages
        run: |
          VERMAGIC=$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)
          echo "Vermagic: $VERMAGIC"
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}
          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo "Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED"
            exit 1
          fi

          echo "Building AmneziaWG packages with Go 1.24.4"

          # Функции download и prepare с retry
          download_with_retry() {
              local pkg=$1
              echo "Downloading $pkg..."
              if ! make package/$pkg/download V=s; then
                  echo "WARNING: $pkg download failed, retrying..."
                  make package/$pkg/download V=s || { echo "ERROR: $pkg download failed permanently!"; exit 1; }
              fi
          }

          prepare_with_retry() {
              local pkg=$1
              echo "Preparing $pkg..."
              if ! make package/$pkg/prepare V=s; then
                  echo "WARNING: $pkg prepare failed, retrying..."
                  make package/$pkg/prepare V=s || { echo "ERROR: $pkg prepare failed permanently!"; exit 1; }
              fi
          }

          # Clean все пакеты
          make package/amneziawg-go/clean V=s
          make package/luci-proto-amneziawg/clean V=s
          make V=s package/amneziawg-tools/clean

          # Download и Prepare с retry
          download_with_retry amneziawg-go
          download_with_retry luci-proto-amneziawg
          download_with_retry amneziawg-tools

          prepare_with_retry amneziawg-go
          prepare_with_retry luci-proto-amneziawg
          prepare_with_retry amneziawg-tools

          # Compile все пакеты
          make package/amneziawg-go/compile V=s
          make package/luci-proto-amneziawg/compile V=s
          make V=s package/amneziawg-tools/compile

      - name: Prepare artifacts
        run: |
          tag_name=${{ github.ref_name }}
          mkdir -p awgrelease
          postfix="${tag_name}_v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-proto-amneziawg_*.ipk awgrelease/luci-proto-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/amneziawg-go_*.ipk awgrelease/amneziawg-go_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk
