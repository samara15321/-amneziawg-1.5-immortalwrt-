name: Auto_Build Release

on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string

jobs:
  generate-config:
    runs-on: ubuntu-latest
    outputs:
      job-config: ${{ steps.generate-config.outputs.job-config }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - id: get_version
        run: echo "VERSION=${{ inputs.tag_name }}" | sed 's/^v//' >> $GITHUB_ENV
      - run: npm install
      - id: generate-config
        run: node sync_index.js ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  openwrt-build:
    runs-on: ubuntu-latest
    needs: generate-config
    strategy:
      matrix:
        build_env: ${{ fromJson(needs.generate-config.outputs.job-config) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Check if package already exists
        id: check-file
        run: |
          postfix="v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget }}"
          FILE_URL="https://github.com/samara15321/amneziawg-2-immortalwrt/releases/download/${{ inputs.tag_name }}/kmod-amneziawg_${postfix}.ipk"
          if curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" --output /dev/null --silent --head --fail "$FILE_URL"; then
            echo "FILE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "FILE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Restore OpenWrt cache
        if: ${{ env.FILE_EXISTS == 'false' }}
        uses: actions/cache@v4
        with:
          path: |
            ./staging_dir
            ./build_dir
            ./tmp
            .config
          key: openwrt-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}

      - name: Setup feeds and config
        if: ${{ env.FILE_EXISTS == 'false' }}
        run: |
          wget https://raw.githubusercontent.com/immortalwrt/immortalwrt/v${{ matrix.build_env.tag }}/feeds.conf.default -O feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a
          wget https://downloads.immortalwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config
          make defconfig

      - name: Build tools and kernel
        if: ${{ env.FILE_EXISTS == 'false' }}
        run: |
          make tools/install -i -j $(nproc)
          make toolchain/install -i -j $(nproc)
          make target/linux/compile -i -j $(nproc) V=s

      - name: Verify vermagic
        if: ${{ env.FILE_EXISTS == 'false' }}
        continue-on-error: true
        run: |
          VERMAGIC=$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)
          if [ "$VERMAGIC" != "${{ matrix.build_env.vermagic }}" ]; then
            echo "::warning:: Vermagic mismatch"
            echo "VERMAGIC_MISMATCH=true" >> $GITHUB_ENV
          else
            echo "VERMAGIC_MISMATCH=false" >> $GITHUB_ENV
          fi

      - name: Upload OpenWrt cache
        if: ${{ env.FILE_EXISTS == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}
          path: ./staging_dir ./build_dir ./tmp .config

  amneziawg-build:
    runs-on: ubuntu-latest
    needs: openwrt-build
    steps:
      - uses: actions/checkout@v4
        with:
          repository: samara1531/amneziawg_2
          fetch-depth: 0

      - name: Download correct OpenWrt build
        uses: actions/download-artifact@v4
        with:
          name: openwrt-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}
          path: ./openwrt

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'

      - name: Setup OpenWrt config for AmneziaWG
        run: |
          cp ./openwrt/.config .config
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          make defconfig

      - name: Build AmneziaWG packages
        run: |
          make package/amneziawg-go/{clean,download,prepare,compile} V=s
          make package/kmod-amneziawg/{clean,download,prepare,compile} V=s
          make package/amneziawg-tools/{clean,download,prepare,compile} V=s
          make package/luci-proto-amneziawg/{clean,download,prepare,compile} V=s

      - name: Prepare artifacts
        run: |
          mkdir -p awgrelease
          postfix="v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget }}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-proto-amneziawg_*.ipk awgrelease/luci-proto-amneziawg_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-go_*.ipk awgrelease/amneziawg-go_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk
